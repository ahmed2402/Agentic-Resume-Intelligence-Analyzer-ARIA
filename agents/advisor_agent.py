import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from core.llm_interface import generate_insights
from agents.ingestion_agent import IngestionAgent
from agents.embedding_agent import EmbeddingAgent

class AdvisorAgent:
    """
    The AdvisorAgent leverages an LLM to generate detailed insights and suggestions
    based on the resume, job description, and their matching score.
    It utilizes the `generate_insights` function from `core/llm_interface.py`.
    """
    def advise(self, resume_text: str, jd_text: str, similarity_score: float) -> dict:
        """
        Generates comprehensive insights for the candidate, including missing skills,
        improvements, strengths, weaknesses, and suggestions.

        Args:
            resume_text (str): The raw text content of the resume.
            jd_text (str): The raw text content of the job description.
            similarity_score (float): The calculated similarity score between the resume and job description.

        Returns:
            dict: A dictionary containing various insights generated by the LLM.
        """
        print("Generating AI-driven insights and suggestions...")
        try:
            insights = generate_insights(resume_text, jd_text, similarity_score)
            if "error" in insights:
                raise Exception(insights["error"])
            print("--- AI Generated Insights ---")
            for key, value in insights.items():
                print(f"\n**{key.replace('_', ' ').title()}**:\n{value}")
            print("Insights generated successfully.")
        except Exception as e:
            print(f"Error generating advice: {e}")
            raise

if __name__ == "__main__":
    # Example Usage:
    RESUME_PATH = "../data/raw/resumes/Ahmed Raza - AI Engineer.pdf"
    JD_PATH = "../data/raw/job_descriptions/ai_engineer.txt"

    ingestion_agent = IngestionAgent()
    embedding_agent = EmbeddingAgent()
    advisor_agent = AdvisorAgent()

    try:
        # Ingestion Phase
        print("\n--- Ingestion Phase ---")
        processed_data = ingestion_agent.ingest(RESUME_PATH, JD_PATH)
        raw_resume = processed_data["raw_resume_text"]
        raw_jd = processed_data["raw_jd_text"]
        cleaned_resume = processed_data["cleaned_resume"]
        cleaned_jd = processed_data["cleaned_job_description"]

        # Embedding Phase
        print("\n--- Embedding Phase ---")
        similarity_score = embedding_agent.process(cleaned_resume, cleaned_jd)

        # Advisory Phase
        print("\n--- Advisory Phase ---")
        insights = advisor_agent.advise(raw_resume, raw_jd, similarity_score)

        print("\n--- Final Results ---")
        print(f"Resume-JD Similarity Score: {similarity_score:.4f}")

        # if "error" not in insights:
        #     print("--- AI Generated Insights ---")
        #     for key, value in insights.items():
        #         print(f"\n**{key.replace('_', ' ').title()}**:\n{value}")
        # else:
        #     print(f"Failed to generate insights: {insights['error']}")

    except FileNotFoundError as e:
        print(f"File error: {e}")
    except NotImplementedError as e:
        print(f"Feature not implemented: {e}")
    except Exception as e:
        print(f"An unexpected error occurred in the advisor agent workflow: {e}")
